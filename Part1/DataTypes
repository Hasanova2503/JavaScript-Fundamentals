2.Data types

A variable can hold one of two value types: primitive values or reference values.

Primitive values are data that are stored on the stack.
Primitive value is stored directly in the location that the variable accesses.

Reference values are objects that are stored in the heap.
Reference value stored in the variable location is a pointer to a location in memory where the object is stored.




Mutable is a type of variable that can be changed. In JavaScript, only objects and arrays are mutable, not primitive values.

(You can make a variable name point to a new value, but the previous value is still held in memory. Hence the need for garbage collection.)

A mutable object is an object whose state can be modified after it is created.

Immutables are the objects whose state cannot be changed once the object is created.

Strings and Numbers are Immutable. Lets understand this with an example:

var immutableString = "Hello";

// In the above code, a new object with string value is created.

immutableString = immutableString + "World";

// We are now appending "World" to the existing value.
On appending the "immutableString" with a string value, following events occur:

Existing value of "immutableString" is retrieved
"World" is appended to the existing value of "immutableString"
The resultant value is then allocated to a new block of memory
"immutableString" object now points to the newly created memory space
Previously created memory space is now available for garbage collection

Primitive types include Undefined, Null, Boolean, Number, or String,Symbol[total 6 types]
Reference Types : Arrays, objects, functions, dates, anything else...

- Js is dynamically typed language., which means types are associated with values and not variables. Same variable can hold multiple types.

-We can use "typeof" to find the type of the value variable is holding

