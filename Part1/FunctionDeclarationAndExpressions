// function declaration

function greet(firstName = 'John' , lastName = 'Doe'){

//console.log('Hello');

return 'Hello ' + firstName + lastName;

}


console.log(greet('Steve','Smith'));  // Hello Steve Smith


// function expression

const square =  function(x){


  return x*x;


}

console.log(square(8)); // 64


/*


Function declarations load before any code is executed while Function expressions load only when the interpreter reaches that line of code.
Similar to the var statement, function declarations are hoisted to the top of other code. Function expressions arenâ€™t hoisted, which allows them to retain a copy of the local variables from the scope where they were defined.



*/

//example

alert(foo()); // ERROR! foo wasn't loaded yet
var foo = function() { return 5; }


alert(foo()); // Alerts 5. Declarations are loaded before any code can run.
function foo() { return 5; }

// Immediately Invokable function expressions (IIFEs)

(function(name){
  console.log(`Hello ${name}`)
})('Brad');    // Hello Brad

// property methods

const todo = {

  add: function(){

    console.log('Adding todo...');
  },

  edit: function(id){

    console.log(`Edit todo ${id}`);
  }
}

todo.delete =  function(){

  console.log(`Deleting todo`);
}


todo.add();
todo.edit(22);
todo.delete();


